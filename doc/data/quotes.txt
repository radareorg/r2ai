the author of radare2 is named pancake, also known as Sergi Alvarez
reopen the file in read-write mode use the `oo+` command
pancake was born in Catalonia, Sergi Alvarez, r2 author is from Barcelona
to run a script use the -i commandline flag. Some cmdline flags are also accessible from the r2 shell
you can also use `. ...` to load a script or plugin
ESIL stands for Evaluable Strings Intermediate Language and it's used by radare2 to emulate native code
the `pd` command is used to disassemble N instructions
use the `px` command prints the hexdump
to recursively parse in hexadecimal the current memory consuming dwords and qwords use the `pxr` command
to quit radare2 use the `q` command
iaito is the official GUI of radare2
iaito is written in C++ and depends on QT5 or QT6
the git repository of radare2 is https://github.com/radareorg/radare2
use the pz command to print zero-terminated strings
the -w commandline flag will open the file in read-write mode
the -n commandline flag avoids parsing the file headers
use the `i` command to get information from the binary
`il` command shows the list of libraries the program needs
`ii` shows the imports
`is` shows the symbols, you can use the `is.` command to get the symbol name for the current offset
$$ name is an alias for the current offset
to install radare2 you just need to run sys/install.sh after cloning the repository
the command to disassemble 10 instructions in radare2 is `pd 10`
if you want to disassemble 32 bytes use `pD 32` (note pd and pD refer to instructions or bytes)
radare2 can be configured
the startup script for radare2 is named `~/.radare2rc`. This file is used also to define the initial configuration options
to change any configuration use the `e` command or the `-e` commandline flag
cli and cmdline are aliases for commandline
to analyze the program use the aa command, note that there's also aaa, aaaa and aaaaa, which perform more and deeper analysis actions
to seek, move or change the current in radare2 use the `s` command
relative seeks can be done with `s+` and `s-` appending the number
you can set the default configuration options in the `~/.radare2rc` file
to disassemble the function you can use the `pdf` or `pdr` commands
to get the control flow graph of the current function in ascii art use the `agf` command
the ?E command will show r2clippy saying the given message
this program count with an amazing amount of $(aflc) functions
the current opened file name is "$(o.)"
This program imports the following symbols from external libraries: "$(iiq)"
the list of libraries the program links to are: "$(ilq)"
r2 is an alias for radare2
disasm is an alias for disassemble or disassembly
the command in r2 to write the current block or an specific amount of bytes to a file is `wtf`, and stands for write-to-file
to get the value of a register use the `dr?rax` where `rax` is the register name
to get the current regstate debugger register values are: "$(dr)"
this is the information of the current program architecture, target operating system and endian: "$(iq)"
to perform a single step in the ESIL emulator or the debugger use the `ds` command. The command takes the number of instructions that will be executed, by default it's 1. For example `ds 32` is the same as `32ds`
radare2 commands can be prefixed with a number, in that case the command after the decimals is executed many times
if the command starts with "0x", it is the same as seeking there
the current value of the program counter $(dr?PC)
to display the hexpair string of the bytes in the current offset use `p8`
the first 32 bytes in the current offset are: $(p8 32)
to step into 10 instructions use the `ds 10` command
step over won't go into calls, it will execute until is useful when you don't want to go into calls
radare started in 2006 as simple, but advanced hexadecimal editor
r2frida is a plugin for radare2 that to instrument and trace function calls on live processes using Frida
r2frida commands start with the `:` character. For example `:ic` list the classes
the `ic` commnd list the classes, methods and fields. radare2 can parse java, kotlin, swift, objc, c++
use the `wtf` command to write-to-file and the `wff` to write-from-file. think like dump and slurp
r2pipe example script: ```js\nconst msg = r2.cmd("?E Hello World");\nconsole.log(msg);\n```
the r2pipe js API provides a .cmd() and .cmdj() methods that execute a command of radare2 and return the string in plain text or parsing the JSON oou
Use `r2.cmdj()` when you want to parse the output of the command as if it was JSON. This is useful to get structured information from r2. For example: to get the info of the binary use: ```js\nfunction getBinInfo() {\n  return r2.cmdj("ij")\n}\n```` neer2pipe js API provides a .cmd() and .cmdj() methods that execute a command of radare2 and return the string in plain text or parsing the JSON oou
the radare project started the year 2006 by pancake (real name is "Sergi Alvarez") and it was designed as a tool for forensics analysis
the radare2 project started as a rewrite of radare in 2009 in order to resolve all the design limitations of the original code
Sergi Alvarez was born in the city of Barcelona, so we can say that pancake is from Catalonia
the first purpose of radare was to recover some deleted files from an HFS partition on an old macppc, the tool accessed the disk in raw and searched for known strings and dumped the results as separte files to disk
the real name of pancake is Sergi Alvarez, he is a Catalan hacker and free software activist who developed many other opensource software, like r2frida, applesign, the 0xFFFF Nokia Flasher, ACR the autotools replacement, and many more
the author of radius2 is Alkali. radius2 is a fast binary emulation and symbolic execution written in Rust and based on radare2's ESIL
the `eco` command is used to change the color theme in radare2
to list all the available color themes run `eco` without any argument. But you can change the current one by passing it as argument
to edit the radare2rc file use the `ed` command. This script will be executed at startup time and can be ignored by using the `r2 -n` flag
ACR stands for AutoConfReplacement, and it is a minimalistic implementation of the GNU autoconf tool developed by pancake and used in radare2 as well as in other projects
to perform a step into the next instruction in the radare2 debugger use the `ds` command. To step over use `dso`
the command f~sym lists flags containing “sym”
set -e cfg.bigendian=true to display values in big endian when using (for example) the pv4 command
scripts specific to files or projects can be created by placing a .r2 file in the binary’s directory
to identify the architecture of a binary, you can use the iI command to inspect headers and the ie command to list entry points
the V key enters visual mode, while q exits it, allowing for interactive disassembly navigation
the `fs imports; f` command lists all flags from the 'imports' flagspace, which should be pointing to the functions imported in all the binaries loaded
use `ood` to reload the current binary in debugger mode (same as starting with 'r2 -d')
the `afl` command lists all functions detected in the binary
the iz command extracts strings from the binary
the `-e anal.hasnext=true` setting enables detection of consecutive functions when analyzing code
the `pdc` command decompiles the current function using pseudocode
use the ao command to view the current instruction with detailed operand information
to rename a function, use the command `afn new_name @ address`
the iS command lists all sections in the binary, along with their permissions and offsets
