# TODO: add windows
name: CI

env:
  R2V: 6.0.4

on:
  push:
    branches:
      - '**'
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build (${{ matrix.os }} / ${{ matrix.build_system }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-latest, windows-latest]
        build_system: [make, meson]
      exclude:
        - os: windows-latest
          build_system: make

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup tools for meson builds
        if: matrix.build_system == 'meson' && matrix.os != 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install meson ninja

      - name: Install radare2 on Linux
        if: matrix.os == 'ubuntu-24.04'
        run: |
          wget "https://github.com/radareorg/radare2/releases/download/${R2V}/radare2_${R2V}_amd64.deb"
          wget "https://github.com/radareorg/radare2/releases/download/${R2V}/radare2-dev_${R2V}_amd64.deb"
          sudo dpkg -i "radare2_${R2V}_amd64.deb"
          sudo dpkg -i "radare2-dev_${R2V}_amd64.deb"

      - name: Install radare2 on macOS
        if: matrix.os == 'macos-latest'
        run: |
          git clone --depth=1 --branch "${{env.R2V}}" https://github.com/radareorg/radare2
          cd radare2
          sys/install.sh

      - name: Build with Make
        if: matrix.build_system == 'make'
        run: make -C src

      - name: Build with Meson (Unix)
        if: matrix.build_system == 'meson' && matrix.os != 'windows-latest'
        run: |
          cd src
          meson setup build -Dr2_prefix=${{ secrets.R2_PREFIX }} || meson configure build
          meson compile -C build

      - name: Setup Meson/Ninja on Windows
        if: matrix.build_system == 'meson' && matrix.os == 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install meson ninja
        shell: powershell

      - name: Build with Meson (Windows, MSVC)
        if: matrix.build_system == 'meson' && matrix.os == 'windows-latest'
        run: |
          cd src
          # Use MSVC (default on windows-latest) and point to optional r2_prefix via secret
          meson setup build -Dr2_prefix=${{ secrets.R2_PREFIX }} || meson configure build
          meson compile -C build
        shell: powershell

      - name: Smoke test r2ai (if present)
        run: |
          if command -v r2 >/dev/null 2>&1; then
            r2 -q -c 'r2ai -h' -- || true
          fi

#  lint-python:
#    runs-on: ubuntu-24.04
#    steps:
#    - uses: actions/checkout@v4
#    - name: Installing radare2
#      run: |
#        wget "https://github.com/radareorg/radare2/releases/download/${R2V}/radare2_${R2V}_amd64.deb"
#        wget "https://github.com/radareorg/radare2/releases/download/${R2V}/radare2-dev_${R2V}_amd64.deb"
#        sudo dpkg -i "radare2_${R2V}_amd64.deb"
#        sudo dpkg -i "radare2-dev_${R2V}_amd64.deb"
#    - name: Setting up Python
#      run: |
#        cd py
#        python -m venv venv
#        . venv/bin/activate
#        pip install .
#        pip install pylint
#        cd ..
#    - name: Linting
#      run: make -C py cilint
#  build-python:
#    runs-on: ubuntu-24.04
#    steps:
#    - uses: actions/checkout@v4
#    - name: Installing radare2
#      run: |
#        wget "https://github.com/radareorg/radare2/releases/download/${R2V}/radare2_${R2V}_amd64.deb"
#        wget "https://github.com/radareorg/radare2/releases/download/${R2V}/radare2-dev_${R2V}_amd64.deb"
#        sudo dpkg -i "radare2_${R2V}_amd64.deb"
#        sudo dpkg -i "radare2-dev_${R2V}_amd64.deb"
#    - name: Setting up Python
#      run: |
#        cd py
#        python -m venv venv
#        . venv/bin/activate
#        pip install pylint
#        cd ..
#    - name: Install Python dependencies
#      run: |
#        cd py
#        . venv/bin/activate
#        pip install .
#        cd ..
#    - name: Running r2ai from the shell
#      run: |
#        cd py
#        . venv/bin/activate
#        python -m r2ai.cli -h
#        cd ..
#    - name: Running r2ai from r2pipe
#      run: |
#        cd py
#        . venv/bin/activate
#        r2 -q -c '#!pipe python -m r2ai.cli -h' /bin/ls
#        cd ..
#    - name: Running r2ai from r2
#      run: |
#        cd py
#        . venv/bin/activate
#        r2 -q -i r2ai/plugin.py -c r2ai /bin/ls
#        cd ..
